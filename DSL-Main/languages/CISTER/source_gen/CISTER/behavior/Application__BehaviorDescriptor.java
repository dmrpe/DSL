package CISTER.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.LinkedList;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Deque;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import java.nio.file.Path;
import java.nio.file.FileSystems;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.nio.file.Files;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Application__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb22039L, "CISTER.structure.Application");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<LinkedList<String>> configureTopics_id3wBOcHlzbvN = new SMethodBuilder<LinkedList<String>>(new SJavaCompoundTypeImpl(LinkedList.class)).name("configureTopics").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3wBOcHlzbvN").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<Deque<String>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(configureTopics_id3wBOcHlzbvN);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static LinkedList<String> configureTopics_id3wBOcHlzbvN(@NotNull SNode __thisNode__, Deque<String> topicData) {
    try {
      Path pub = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3827d0cb5594d4afL, "ROS_TOPIC_OUTPUT_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x40c10be72dcd30bcL, "ROSTOPIC_IN")));
      Path sub = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3827d0cb5594d4afL, "ROS_TOPIC_OUTPUT_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x40c10be72ded2bcbL, "ROS_SUB_IN")));
      Path out = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3827d0cb5594d4afL, "ROS_TOPIC_OUTPUT_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3827d0cb55950945L, "ROS_TOPIC_OUTPUT_FILE_NAME")));
      Path sOut = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x40c10be72ded8728L, "ROS_TOPIC_SUB_OUTPUT_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x40c10be72ded87b5L, "ROS_TOPIC_SUB_OUTPUT_FILE_NAME")));
      Path pAux = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x40c10be72dba2e1cL, "DOCKERFILE_OUT")), "dockerfile.txt");
      Path outAux = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x40c10be72dba2e1cL, "DOCKERFILE_OUT")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x40c10be72dba6414L, "DOCKERFILE_NAME")));
      List<String> list = Files.readAllLines(pub);
      LinkedList<String> listConfigs = new LinkedList(list);
      LinkedList<String> finalList = new LinkedList(list);
      for (String data : topicData) {
        String path = data.split(",")[0];
        String type = data.split(",")[1];
        for (String configLine : listConfigs) {
          if (configLine.contains("ros::Publisher")) {
            String typeLocal = "  ros::Publisher chatter_pub = n.advertise<std_msgs::" + type + ">" + "(\"" + path + "\", 1000);";
            int index = finalList.indexOf(configLine);
            finalList.remove(index);
            finalList.add(index, typeLocal);
          }
        }
      }
      Files.write(out, finalList);
      List<String> listDockerFile = Files.readAllLines(pAux);
      Files.write(outAux, listDockerFile);
      list.clear();
      list = Files.readAllLines(sub);
      LinkedList<String> listConfigsSub = new LinkedList(list);
      LinkedList<String> finalListSub = new LinkedList(list);
      for (String data : topicData) {
        String path = data.split(",")[0];
        String type = data.split(",")[1];
        for (String configLine : listConfigsSub) {
          if (configLine.contains("Callback")) {
            String typeLocal;
            switch (type) {
              case "float":
                typeLocal = "void chatterCallback(const std_msgs::Float::ConstPtr& msg)";
                break;
              default:
                typeLocal = "void chatterCallback(const std_msgs::String::ConstPtr& msg)";
            }
            int index = finalListSub.indexOf(configLine);
            finalListSub.remove(index);
            finalListSub.add(index, typeLocal);
          }
        }
      }
      Files.write(sOut, finalListSub);
      finalList.addAll(finalListSub);
      return finalList;
    } catch (Exception ex) {
      return new LinkedList<String>();
    }
  }

  /*package*/ Application__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((LinkedList<String>) configureTopics_id3wBOcHlzbvN(node, (Deque<String>) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
