package CISTER.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBehaviorAspectDescriptor;
import jetbrains.mps.core.aspects.behaviour.api.BHDescriptor;
import org.jetbrains.annotations.Nullable;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public final class BehaviorAspectDescriptor extends BaseBehaviorAspectDescriptor {
  private final BHDescriptor myViews__BehaviorDescriptor = new Views__BehaviorDescriptor();
  private final BHDescriptor myPlatform__BehaviorDescriptor = new Platform__BehaviorDescriptor();
  private final BHDescriptor myHypervisor__BehaviorDescriptor = new Hypervisor__BehaviorDescriptor();
  private final BHDescriptor myView__BehaviorDescriptor = new View__BehaviorDescriptor();
  private final BHDescriptor myRefinement__BehaviorDescriptor = new Refinement__BehaviorDescriptor();
  private final BHDescriptor myInstall__BehaviorDescriptor = new Install__BehaviorDescriptor();
  private final BHDescriptor myPartition__BehaviorDescriptor = new Partition__BehaviorDescriptor();
  private final BHDescriptor myApplication__BehaviorDescriptor = new Application__BehaviorDescriptor();
  private final BHDescriptor myTopic__BehaviorDescriptor = new Topic__BehaviorDescriptor();

  public BehaviorAspectDescriptor() {
  }

  @Nullable
  public BHDescriptor getDescriptor(@NotNull SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return myApplication__BehaviorDescriptor;
      case 1:
        return myHypervisor__BehaviorDescriptor;
      case 2:
        return myInstall__BehaviorDescriptor;
      case 3:
        return myPartition__BehaviorDescriptor;
      case 4:
        return myPlatform__BehaviorDescriptor;
      case 5:
        return myRefinement__BehaviorDescriptor;
      case 6:
        return myTopic__BehaviorDescriptor;
      case 7:
        return myView__BehaviorDescriptor;
      case 8:
        return myViews__BehaviorDescriptor;
      default:
    }
    return null;
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb22039L), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb9863bL), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758015dfaL)).seal();
}
