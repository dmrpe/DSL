package CISTER.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.LinkedList;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Deque;
import org.jetbrains.mps.openapi.model.SNode;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import java.nio.file.Path;
import java.nio.file.FileSystems;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.nio.file.Files;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.BitSet;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Hypervisor__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<LinkedList<String>> configureHV_id2XWNstojUc_ = new SMethodBuilder<LinkedList<String>>(new SJavaCompoundTypeImpl(LinkedList.class)).name("configureHV").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2XWNstojUc_").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<Deque<SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter((Class<Deque<SNode>>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<LinkedList<String>> processPartition_id7Q_dLUyE$V = new SMethodBuilder<LinkedList<String>>(new SJavaCompoundTypeImpl(LinkedList.class)).name("processPartition").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("7Q_dLUyE$V").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(LinkedList.class, ""), SMethodBuilder.createJavaParameter(LinkedList.class, ""));
  /*package*/ static final SMethod<String> calculateCoreBitmask_id7Q_dLXM98Z = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("calculateCoreBitmask").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("7Q_dLXM98Z").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  /*package*/ static final SMethod<String> getStringFromArray_id7Q_dLYoFe1 = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("getStringFromArray").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("7Q_dLYoFe1").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<List<SNode>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(String.class, ""));
  /*package*/ static final SMethod<String> converToHexByte_id5cfLmetcxhT = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("converToHexByte").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("5cfLmetcxhT").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""), SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> saveIntermediaryLanguageToFile_id1HXM3RPuFIj = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("saveIntermediaryLanguageToFile").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("1HXM3RPuFIj").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(LinkedList.class, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(configureHV_id2XWNstojUc_, processPartition_id7Q_dLUyE$V, calculateCoreBitmask_id7Q_dLXM98Z, getStringFromArray_id7Q_dLYoFe1, converToHexByte_id5cfLmetcxhT, saveIntermediaryLanguageToFile_id1HXM3RPuFIj);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static LinkedList<String> configureHV_id2XWNstojUc_(@NotNull SNode __thisNode__, Deque<SNode> configParts, Deque<SNode> configChannel) {
    try {
      Path p = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8623315L, "CELL_CONFIG_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8623318L, "CELL_CONFIG_FILE_NAME")));
      List<String> list = Files.readAllLines(p);
      LinkedList<String> configsList = new LinkedList(list);
      LinkedList<String> partList = new LinkedList();

      LinkedList<String> configStrings = new LinkedList<String>();
      for (SNode part : configParts) {
        String coresString = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8655394L, "CORE_STRING_PREFIX"));
        for (SNode coresSingle : SLinkOperations.getChildren(SLinkOperations.getTarget(part, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L, 0x2f7ccdc758475daeL, "Cores")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d41L, 0x2f7ccdc758475d9aL, "cores"))) {
          coresString += String.valueOf(SPropertyOperations.getInteger(coresSingle, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L, 0x2f7ccdc758475d79L, "identifier"))) + ",";
        }
        configStrings.add(coresString.substring(0, coresString.length() - 1) + "]");
        configStrings.add(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86687d0L, "CONFIG_STRINGS_NAME_PREFIX")) + SPropertyOperations.getString(part, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")));
        for (SNode memReg : SLinkOperations.getChildren(part, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L, 0xf38a1310f9f0680L, "MemoryRegion"))) {
          configStrings.add(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a867294fL, "CONFIG_STRINGS_MEMORY_PREFIX")) + SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")) + ":" + SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart")) + ":" + SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062eL, "virtStart")) + ":" + SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310facc22dL, "size")));
        }
        for (SNode irqNode : SLinkOperations.getChildren(part, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L, 0x1f694dc7df017a6L, "irqChips"))) {
          configStrings.add(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8685d2dL, "CONFIG_STRINGS_ADDR_PREFIX")) + SPropertyOperations.getString(irqNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7df282e0L, "target")) + ":" + SPropertyOperations.getString(irqNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL, "address")) + ":" + SPropertyOperations.getString(irqNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48e1L, "pin_base")) + ":" + Hypervisor__BehaviorDescriptor.getStringFromArray_id7Q_dLYoFe1.invoke(__thisNode__, SLinkOperations.getChildren(SLinkOperations.getTarget(irqNode, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7e53121dL, "pinBitmap")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5311ffL, 0x1f694dc7e5e21b0L, "inputs")), ","));
        }
        for (SNode pciDevices : SLinkOperations.getChildren(part, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L, 0x1b7dc83df55fdb33L, "pciDevices"))) {
          configStrings.add(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8685d3eL, "CONFIG_STRINGS_DEVICE_PREFIX")) + SPropertyOperations.getString(pciDevices, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df55fdb27L, 0x1b7dc83df55fdb28L, "type")) + ":" + SPropertyOperations.getString(pciDevices, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df55fdb27L, 0x1b7dc83df55fdb30L, "region")));
        }
        for (SNode channel : configChannel) {
          String channelConfg = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8685d35L, "CONFIG_STRINGS_CHANNEL_PREFIX")) + SPropertyOperations.getString(SLinkOperations.getTarget(channel, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2255aL, 0x1f694dc7ea3119bL, "connect")), MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea31162L, 0x1f694dc7ea31163L, "from")) + ":" + SPropertyOperations.getString(SLinkOperations.getTarget(channel, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2255aL, 0x1f694dc7ea3119bL, "connect")), MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea31162L, 0x1f694dc7ea31165L, "to")) + ":" + SPropertyOperations.getString(channel, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2255aL, 0x1f694dc7ea3119dL, "size")) + ":";
          for (SNode permission : SLinkOperations.getChildren(channel, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2255aL, 0x1f694dc7ea311abL, "permission"))) {
            channelConfg += SPropertyOperations.getString(permission, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea3119fL, 0x1f694dc7ea311a0L, "target")) + ":";
            channelConfg += Hypervisor__BehaviorDescriptor.getStringFromArray_id7Q_dLYoFe1.invoke(__thisNode__, SLinkOperations.getChildren(permission, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea3119fL, 0x1f694dc7ea311a9L, "permission")), ",") + ":";
          }
          channelConfg += SPropertyOperations.getString(channel, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2255aL, 0x1f694dc7ea311b4L, "protocol"));
          configStrings.add(channelConfg);
        }
        String fileName = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86a6351L, "CELL_CONFIG_OUTPUT_FILE_NAME")) + SPropertyOperations.getString(part, MetaAdapterFactory.getProperty(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L, 0x110396ec041L, "name")) + ".c";
        Path out = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8623315L, "CELL_CONFIG_FILE_PATH")), fileName);
        LinkedList<String> partSingle = Hypervisor__BehaviorDescriptor.processPartition_id7Q_dLUyE$V.invoke(__thisNode__, configStrings, configsList);
        partList.addAll(partSingle);
        Files.write(out, partSingle);
      }
      Hypervisor__BehaviorDescriptor.saveIntermediaryLanguageToFile_id1HXM3RPuFIj.invoke(__thisNode__, configStrings);
      return partList;
    } catch (Exception ex) {
      LinkedList<String> finalList = new LinkedList();
      finalList.add(ex.toString());
      return finalList;
    }
  }
  /*package*/ static LinkedList<String> processPartition_id7Q_dLUyE$V(@NotNull SNode __thisNode__, LinkedList<String> configStrings, LinkedList<String> configsList) {
    String currentPartName = "NULL_PART";
    LinkedList<String> finalList = new LinkedList(configsList);
    for (String hypervisorCfgEntry : configsList) {
      for (String configSingle : configStrings) {
        if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86b2e0cL, "CORES_SEARCH_TERM"))) && hypervisorCfgEntry.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86bc901L, "CORES_SEARCH_TERM_IN_FILE")))) {
          int indexCpus = configsList.indexOf(hypervisorCfgEntry);
          String newEntry = "\t\t" + Hypervisor__BehaviorDescriptor.calculateCoreBitmask_id7Q_dLXM98Z.invoke(__thisNode__, configSingle) + ",";
          finalList.remove(indexCpus + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0068bL, "TRAILING_LINES_CORE_CONFIG")));
          finalList.add(indexCpus + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0068bL, "TRAILING_LINES_CORE_CONFIG")), newEntry);
          continue;
        }
        if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86e0420L, "NAME_SEARCH_TERM"))) && hypervisorCfgEntry.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86e042eL, "NAME_SEARCH_TERM_IN_FILE")))) {
          int indexName = configsList.indexOf(hypervisorCfgEntry);
          String newEntry = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86e042eL, "NAME_SEARCH_TERM_IN_FILE")) + "\"" + configSingle.split(":")[1] + "\",";
          finalList.remove(indexName);
          finalList.add(indexName, newEntry);
          currentPartName = configSingle.split(":")[1];
          continue;
        }
        if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86e043dL, "MEMORY_REG_SEARCH_TERM")))) {
          String[] memConfig = configSingle.split(":");
          // if file configuration contains memory target -- (UART OR SIMILAR) 
          // [1] target 
          // [2] phys start 
          // [3] virt start 
          // [4] size 
          if (hypervisorCfgEntry.contains(memConfig[1])) {
            int indexName = configsList.indexOf(hypervisorCfgEntry);
            String physConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a874f5f0L, "PHYS_START_PREFIX")) + memConfig[2] + ",";
            String virtConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a874f604L, "VIRT_START_PREFIX")) + memConfig[3] + ",";
            String sizeConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8757a27L, "SIZE_PREFIX")) + memConfig[4] + ",";
            finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006b0L, "TRAILING_LINES_PHYS_CONFIG")));
            finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006b0L, "TRAILING_LINES_PHYS_CONFIG")), physConfig);
            finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006d6L, "TRAILING_LINES_VIRT_CONFIG")));
            finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006d6L, "TRAILING_LINES_VIRT_CONFIG")), virtConfig);
            finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006fdL, "TRAILING_LINES_SIZE_CONFIG")));
            finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006fdL, "TRAILING_LINES_SIZE_CONFIG")), sizeConfig);
            continue;
          }
        }
        if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86e044dL, "ADDR_SEARCH_TERM")))) {
          String[] addrConfig = configSingle.split(":");
          if (hypervisorCfgEntry.contains(addrConfig[1])) {
            int indexName = configsList.indexOf(hypervisorCfgEntry);
            String addressConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a878e0e3L, "ADDRESS_PREFIX")) + addrConfig[2] + ",";
            String baseConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a878e0faL, "PINBASE_PREFIX")) + addrConfig[3] + ",";
            String bitmapConfig1 = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a878e112L, "PINBITMAP_PREFIX"));
            String[] bitmapConfig2Split = addrConfig[4].split(",");
            finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c00725L, "TRAILING_LINES_ADDR_CONFIG")));
            finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c00725L, "TRAILING_LINES_ADDR_CONFIG")), addressConfig);
            finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0074eL, "TRAILING_LINES_PINBASE_CONFIG")));
            finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0074eL, "TRAILING_LINES_PINBASE_CONFIG")), baseConfig);
            finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c007ccL, "TRAILING_LINES_PINBITMAP_CONFIG_1")));
            finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c007ccL, "TRAILING_LINES_PINBITMAP_CONFIG_1")), bitmapConfig1);
            for (int i = 0; i < bitmapConfig2Split.length; i++) {
              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c007f7L, "TRAILING_LINES_PINBITMAP_CONFIG_2")) + i);
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c007f7L, "TRAILING_LINES_PINBITMAP_CONFIG_2")) + i, (i + 1 < bitmapConfig2Split.length ? "\t\t\t" + bitmapConfig2Split[i] + "," : "\t\t\t" + bitmapConfig2Split[i]));
            }
            continue;
          }
        }
        if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a871f27aL, "DEVICE_SEARCH_TERM")))) {

          String[] deviceConfig = configSingle.split(":");
          // [1] type 
          // [2] region 
          String typeString = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x1b7dc83df60bee93L, "CONST_PCI_DEVICE_IDENTIFIER_IVHSMEM")).split("=")[0];
          if (hypervisorCfgEntry.contains(typeString) && SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x1b7dc83df60bee93L, "CONST_PCI_DEVICE_IDENTIFIER_IVHSMEM")).split("=")[1].contains(deviceConfig[1])) {
            int indexName = configsList.indexOf(hypervisorCfgEntry);
            // REGION 
            finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c00823L, "TRAILING_LINES_REGION_CONFIG")));
            finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c00823L, "TRAILING_LINES_REGION_CONFIG")), "\t\t\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a87ce52dL, "REGION_PREFIX")) + deviceConfig[2] + ",");
            continue;
          }
        }
        if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a871f28cL, "CHANNEL_SEARCH_TERM")))) {
          // [1] from 
          // [2] to 
          // [3] size 
          // [4] target permission 
          // [5] permissions 
          // [6] target permission 2 
          // [7] permissions 2 
          // [8] protocol 
          String[] channelConfig = configSingle.split(":");
          if (channelConfig[1].equals(currentPartName) || channelConfig[2].equals(currentPartName)) {
            if (hypervisorCfgEntry.contains(channelConfig[8])) {
              int indexName = configsList.indexOf(hypervisorCfgEntry);
              String size = "\t\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8757a27L, "SIZE_PREFIX")) + " 0x" + Hypervisor__BehaviorDescriptor.converToHexByte_id5cfLmetcxhT.invoke(__thisNode__, channelConfig[3].substring(0, channelConfig[3].length() - 2), channelConfig[3].substring(channelConfig[3].length() - 2, channelConfig[3].length())) + ",";
              String flags = "\t\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a87fa4eeL, "FLAGS_PREFIX"));
              for (int i = 5; i < 8; i += 2) {
                String[] permissionsSplit = channelConfig[i].split(",");
                if (channelConfig[i - 1].equals(currentPartName)) {
                  for (String perm : permissionsSplit) {
                    switch (perm) {
                      case "read":
                        flags += SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8806345L, "FLAGS_JAILHOUSE_READ"));
                        break;
                      case "write":
                        flags += SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8806361L, "FLAGS_JAILHOUSE_WRITE"));
                        break;
                    }
                  }
                  flags += SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a880637eL, "FLAGS_JAILHOUSE_SHARED"));
                }
              }
              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c00850L, "TRAILING_LINES_CHANNEL_SIZE_CONFIG")));
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c00850L, "TRAILING_LINES_CHANNEL_SIZE_CONFIG")), size);
              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0087eL, "TRAILING_LINES_FLAGS_CONFIG")));
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0087eL, "TRAILING_LINES_FLAGS_CONFIG")), flags);
              continue;
            }
          }
        }

      }
    }
    return finalList;
  }
  /*package*/ static String calculateCoreBitmask_id7Q_dLXM98Z(@NotNull SNode __thisNode__, String coreConfig) {
    String coreConfigMain = coreConfig.replace(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8655394L, "CORE_STRING_PREFIX")), "").replace("]", "");
    String[] coreConfigSplit = coreConfigMain.split(",");
    String bitmask = "000000";
    char[] arrBitmask = bitmask.toCharArray();
    BitSet set = new BitSet(6);
    for (String coreConf : coreConfigSplit) {
      arrBitmask[Math.abs(Integer.parseInt(coreConf))] = '1';
    }
    int inc = 0;
    for (int i = (arrBitmask.length - 1); i >= 0; i--) {
      if (arrBitmask[i] == '1') {
        set.set(inc++, true);
        continue;
      }
      set.set(inc++, false);
    }
    return String.format("0x%01X", new Long(set.toLongArray()[0]));
  }
  /*package*/ static String getStringFromArray_id7Q_dLYoFe1(@NotNull SNode __thisNode__, List<SNode> arr, String separator) {
    String ret = "";
    for (SNode s : arr) {
      ret += SPropertyOperations.getString(s, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5e2199L, 0x1f694dc7e5e219aL, "value")) + separator;
    }
    return ret.substring(0, ret.length() - 1);
  }
  /*package*/ static String converToHexByte_id5cfLmetcxhT(@NotNull SNode __thisNode__, String actualSize, String unit) {
    long size = Long.parseLong(actualSize);
    if (unit.equalsIgnoreCase("MB")) {
      long multiplier = 1024 * 1024;
      size *= multiplier;
    }
    if (unit.equalsIgnoreCase("KB")) {
      size *= 1024;
    }
    return Long.toHexString(size);
  }
  /*package*/ static void saveIntermediaryLanguageToFile_id1HXM3RPuFIj(@NotNull SNode __thisNode__, LinkedList<String> entries) {
    Path p = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8623315L, "CELL_CONFIG_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8840487L, "CELL_META_FILE_NAME")));
    try {
      Files.write(p, entries);
    } catch (Exception ex) {
    }
  }

  /*package*/ Hypervisor__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((LinkedList<String>) configureHV_id2XWNstojUc_(node, (Deque<SNode>) parameters[0], (Deque<SNode>) parameters[1]));
      case 1:
        return (T) ((LinkedList<String>) processPartition_id7Q_dLUyE$V(node, (LinkedList<String>) parameters[0], (LinkedList<String>) parameters[1]));
      case 2:
        return (T) ((String) calculateCoreBitmask_id7Q_dLXM98Z(node, (String) parameters[0]));
      case 3:
        return (T) ((String) getStringFromArray_id7Q_dLYoFe1(node, (List<SNode>) parameters[0], (String) parameters[1]));
      case 4:
        return (T) ((String) converToHexByte_id5cfLmetcxhT(node, (String) parameters[0], (String) parameters[1]));
      case 5:
        saveIntermediaryLanguageToFile_id1HXM3RPuFIj(node, (LinkedList<String>) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
