package CISTER.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.LinkedList;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Deque;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import java.nio.file.Path;
import java.nio.file.FileSystems;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;
import java.nio.file.Files;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Install__BehaviorDescriptor extends BaseBHDescriptor {
  private static final Logger LOG = LogManager.getLogger(Install__BehaviorDescriptor.class);
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL, "CISTER.structure.Install");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<LinkedList<String>> configureInstall_id3rFqjaDB8aR = new SMethodBuilder<LinkedList<String>>(new SJavaCompoundTypeImpl(LinkedList.class)).name("configureInstall").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3rFqjaDB8aR").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<Deque<String>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(configureInstall_id3rFqjaDB8aR);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static LinkedList<String> configureInstall_id3rFqjaDB8aR(@NotNull SNode __thisNode__, Deque<String> configsList) {
    LinkedList<String> ret = new LinkedList();
    LinkedList<String> retScripts = new LinkedList();
    Path out = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a9a50913L, "INSTALL_CONFIG_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a9a508ddL, "INSTALL_CONFIG_FILE_NAME")));
    Path outScripts = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a9a50913L, "INSTALL_CONFIG_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0ea4ab23L, "SCRIPTS_INJECTION_FILE_NAME")));
    ret.add("#!/bin/bash");
    for (String configLine : configsList) {
      if (configLine.contains("target:")) {
        // if easy-deploy is enabled  (downloads  official image) 
        if (configLine.contains("BananaPi") && configLine.contains("true")) {
          ret.add("wget http://cdimage.ubuntu.com/releases/bionic/release/ubuntu-18.04.3-preinstalled-server-arm64+raspi3.img.xz?_ga=2.261429517.1054093792.1567174104-1482131256.1553622037");
          ret.add("xzcat ubuntu-18.04.3-preinstalled-server-arm64+raspi3.img.xz | sudo dd of=mmcblk0 bs=32M");
          ret.add("sync");
          continue;
        }
        if (configLine.contains("BananaPi")) {
          ret.add("SECONDS=0\n");
          ret.add("#configure linux kernel");
          final String kVersion = LinkedListSequence.fromLinkedListNew(configsList).findFirst(new IWhereFilter<String>() {
            public boolean accept(String it) {
              return it.contains("kernel");
            }
          }).split(":")[1];
          ret.add("echo \"Downloading linux kernel version " + kVersion + "\"");
          Deque<String> kDownloadLinks = LinkedListSequence.fromLinkedListNew(new LinkedList<String>());
          String[] links = SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0dd34d8eL, "KERNEL_VERSION_DOWNLOADS")).split(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0dd41cd9L, "KERNEL_VERSION_DOWNLOADS_SEPARATOR")));
          for (String link : links) {
            if (LOG.isEnabledFor(Level.WARN)) {
              LoggingRuntime.legacyLog(Level.WARN, link, Install__BehaviorDescriptor.class, null);
            }
            LinkedListSequence.fromLinkedListNew(kDownloadLinks).addElement(link);
          }

          String downloadLink = LinkedListSequence.fromLinkedListNew(kDownloadLinks).findFirst(new IWhereFilter<String>() {
            public boolean accept(String it) {
              return it.contains(kVersion);
            }
          }).split("_")[1];
          ret.add("wget " + downloadLink);
          if (LOG.isEnabledFor(Level.WARN)) {
            LoggingRuntime.legacyLog(Level.WARN, downloadLink + "", Install__BehaviorDescriptor.class, null);
          }

          Deque<String> splitDownloadLink = LinkedListSequence.fromLinkedListNew(new LinkedList<String>());
          for (String node : downloadLink.split("/")) {
            LinkedListSequence.fromLinkedListNew(splitDownloadLink).addElement(node);
          }

          String fileName = LinkedListSequence.fromLinkedListNew(splitDownloadLink).getElement(LinkedListSequence.fromLinkedListNew(splitDownloadLink).count() - 1);

          ret.add("tar -xvf " + fileName);
          String folderName = fileName.split(".tar")[0];
          ret.add("cp " + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0e887bdbL, "BANANAPI_KCONFIG")) + " " + folderName + "/arch/arm/configs");
          ret.add("cd " + folderName);
          ret.add("#can copy kconfig generated from DSL");
          ret.add("echo \"Compiling kernel...\"");
          ret.add(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0e88e779L, "KERNEL_COMPILE_TOOLCHAIN")) + " " + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0e887bdbL, "BANANAPI_KCONFIG")));
          ret.add(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0e88e779L, "KERNEL_COMPILE_TOOLCHAIN")) + " uImage LOADADDR=0x40008000 dtbs modules");
          ret.add(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0e88e779L, "KERNEL_COMPILE_TOOLCHAIN")) + " modules_install INSTALL_MOD_PATH=" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x165d3ac4cb8df290L, "INSTALL_MOD_PATH")));
          ret.add("cp arch/arm/boot/uImage ../");
          ret.add("chmod 777 ../uImage");
          ret.add("cd ..");
          ret.add("echo \"Kernel took $SECONDS seconds to compile. Resetting timer...\"");
          ret.add("SECONDS=0\n");
          ret.add("#configure disk image");
          ret.add("mkdir copy");
          // may substitute for wget -- online images for bpi 
          ret.add("cp ../BPI/ubuntusrv.img" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x165d3ac4cb8e85e2L, "IMAGE_BASE")) + " ./copy");
          ret.add("mv ./copy/" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x165d3ac4cb8e85e2L, "IMAGE_BASE")) + " ./" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x165d3ac4cb8e8620L, "IMAGE_OUT")));
          ret.add("rm -r copy");
          ret.add("echo \"Setting up loopback device\"");
          ret.add("sudo losetup -P /dev/loop53 " + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x165d3ac4cb8e8620L, "IMAGE_OUT")));
          ret.add("mkdir tmpfs");
          ret.add("mkdir tmpfs/partition1");
          ret.add("mkdir tmpfs/partition2");
          ret.add("echo \"Mounting fake partitions\"");
          ret.add("sudo mount -t vfat /dev/loop53p1 tmpfs/partition1");
          ret.add("sudo mount -t ext4 /dev/loop53p2 tmpfs/partition2");
          ret.add("sync ");
          ret.add("sudo rm -r tmpfs/partition1/*");
          ret.add("sudo rm -r tmpfs/partition2/*");
          ret.add("echo \"Copying filesystem\"");
          ret.add("sudo cp -r ../BPI/BPI-ROOT/* tmpfs/partition1");
          ret.add("sudo cp -r ../BPI/BPI-ROOT2/* tmpfs/partition2");
          ret.add("mkdir tmpfs/partition2/scripts");
          ret.add("sudo mkdir tmpfs/partition2/scripts/rosapp");
          ret.add("sudo mkdir tmpfs/partition2/scripts/rosapp/src");
          ret.add("sudo mkdir tmpfs/partition2/scripts/rosapp/src/app");
          ret.add("sync");
          ret.add("sudo rm tmpfs/partition1/bananapi/bpi-all/linux4/extlinux/zImage");
          ret.add("echo \"Copying kernel image\"");
          ret.add("sudo cp zImage tmpfs/partition1/bananapi/bpi-all/linux4/extlinux");
          ret.add("sudo umount /dev/loop53p1");
          ret.add("sudo umount /dev/loop53p2");
          ret.add("sudo losetup -d /dev/loop53");
          ret.add("echo \"Took $SECONDS seconds to create image file\"");
          continue;
        }
      }
      if (configLine.contains("line:")) {
        if (configLine.contains("ros-")) {
          retScripts.add("#ROS installation");
          retScripts.add("echo \"deb http://packages.ros.org/ros/ubuntu $(lsb_release -sc) main\" > /etc/apt/sources.list.d/ros-latest.list");
          retScripts.add("sudo apt-key adv --keyserver hkp://ha.pool.sks-keyservers.net:80 --recv-key C1CF6E31E6BADE8868B172B4F42ED6FBAB17C654");
          retScripts.add("sudo apt-get update");
          retScripts.add("sudo apt-get install " + configLine.split(":")[1] + "-desktop-full");
          retScripts.add("sudo rosdep init");
          retScripts.add("rosdep update");
          retScripts.add("echo \"source /opt/ros/kinetic/setup.bash\" >> ~/.bashrc>");
          retScripts.add("source ~/.bashrc");
          continue;
        }
        if (configLine.contains("jailhouse")) {
          retScripts.add("#Jailhouse installation");
          retScripts.add("git clone https://github.com/siemens/jailhouse.git");
          retScripts.add("make install");
          continue;
        }
        if (configLine.contains("docker")) {
          retScripts.add("#Docker installation");
          retScripts.add("sudo apt-get install apt-transport-https ca-certificates curl  gnupg-agent  software-properties-common");
          retScripts.add("curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -");
          retScripts.add("sudo apt-key fingerprint 0EBFCD88");
          retScripts.add("sudo add-apt-repository \\n   \"deb [arch=amd64] https://download.docker.com/linux/ubuntu \\n   $(lsb_release -cs) \\n   stable\"");
          retScripts.add("sudo apt-get update");
          retScripts.add("sudo apt-get install docker-ce docker-ce-cli containerd.io");
          retScripts.add("#ROS Image for Docker");
          retScripts.add("sudo docker pull ros");
          retScripts.add("sudo docker network create rosnet");
          retScripts.add("/bin/bash -c 'docker run -it --net rosnet --name master ros roscore'");
          retScripts.add("#Prepare ROS environment");
          retScripts.add("sudo cp publisher-new.cpp tmpfs/partition2/scripts/rosapp/src/app ");
          retScripts.add("sudo cp subscriber-new.cpp tmpfs/partition2/scripts/rosapp/src/app ");
          continue;
        }

        // injects side scripts into main file system 
        ret.add(37, "cp " + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x3489eacd0ea4ab23L, "SCRIPTS_INJECTION_FILE_NAME")) + " tmpfs/partition2/scripts");
      }
    }
    try {
      Files.write(out, ret);
      Files.write(outScripts, retScripts);

    } catch (Exception ex) {
    }
    ret.addAll(retScripts);
    return ret;

  }

  /*package*/ Install__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((LinkedList<String>) configureInstall_id3rFqjaDB8aR(node, (Deque<String>) parameters[0]));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
