package CISTER.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.LinkedList;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Deque;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import java.nio.file.Path;
import java.nio.file.FileSystems;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.nio.file.Files;
import java.util.BitSet;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Platform__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL, "CISTER.structure.Platform");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<LinkedList<String>> configurePV_id2XWNstok1Pg = new SMethodBuilder<LinkedList<String>>(new SJavaCompoundTypeImpl(LinkedList.class)).name("configurePV").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2XWNstok1Pg").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<Deque<String>>) ((Class) Object.class), ""));
  /*package*/ static final SMethod<String> calculateCoreBitmask_id7Q_dLX5or$ = new SMethodBuilder<String>(new SJavaCompoundTypeImpl(String.class)).name("calculateCoreBitmask").modifiers(SModifiersImpl.create(0, AccessPrivileges.PRIVATE)).concept(CONCEPT).id("7Q_dLX5or$").registry(REGISTRY).build(SMethodBuilder.createJavaParameter(String.class, ""));
  public static final SMethod<Void> saveIntermediaryLanguageToFile_id3rFqjaCkqqw = new SMethodBuilder<Void>(new SJavaCompoundTypeImpl(Void.class)).name("saveIntermediaryLanguageToFile").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("3rFqjaCkqqw").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<Deque<String>>) ((Class) Object.class), ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(configurePV_id2XWNstok1Pg, calculateCoreBitmask_id7Q_dLX5or$, saveIntermediaryLanguageToFile_id3rFqjaCkqqw);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static LinkedList<String> configurePV_id2XWNstok1Pg(@NotNull SNode __thisNode__, Deque<String> config) {
    try {
      Path p = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a88ca912L, "HYPERVISOR_CONFIG_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a88ca953L, "HYPERVISOR_CONFIG_FILE_NAME")));
      Path out = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a88ca932L, "HYPERVISOR_CONFIG_OUTPUT_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a88fed5dL, "HYPERVISOR_CONFIG_OUTPUT_FILE_NAME")));
      List<String> list = Files.readAllLines(p);
      LinkedList<String> listConfigs = new LinkedList(list);
      LinkedList<String> finalList = new LinkedList(list);

      for (String platformCfgEntry : listConfigs) {
        for (String configSingle : config) {
          if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86b2e0cL, "CORES_SEARCH_TERM"))) && platformCfgEntry.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86bc901L, "CORES_SEARCH_TERM_IN_FILE")))) {
            int indexCpus = listConfigs.indexOf(platformCfgEntry);
            String newEntry = "\t\t" + Platform__BehaviorDescriptor.calculateCoreBitmask_id7Q_dLX5or$.invoke(__thisNode__, configSingle) + ",";
            finalList.remove(indexCpus + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0068bL, "TRAILING_LINES_CORE_CONFIG")));
            finalList.add(indexCpus + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0068bL, "TRAILING_LINES_CORE_CONFIG")), newEntry);
            continue;
          }
          if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86e043dL, "MEMORY_REG_SEARCH_TERM")))) {
            String[] memConfig = configSingle.split(":");
            // if file configuration contains memory target -- (UART OR SIMILAR) 
            // [1] target 
            // [2] phys start 
            // [3] virt start 
            // [4] size 
            if (platformCfgEntry.contains(memConfig[1])) {
              int indexName = listConfigs.indexOf(platformCfgEntry);
              String physConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a874f5f0L, "PHYS_START_PREFIX")) + memConfig[2] + ",";
              String virtConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a874f604L, "VIRT_START_PREFIX")) + memConfig[3] + ",";
              String sizeConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8757a27L, "SIZE_PREFIX")) + memConfig[4] + ",";
              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006b0L, "TRAILING_LINES_PHYS_CONFIG")));
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006b0L, "TRAILING_LINES_PHYS_CONFIG")), physConfig);
              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006d6L, "TRAILING_LINES_VIRT_CONFIG")));
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006d6L, "TRAILING_LINES_VIRT_CONFIG")), virtConfig);
              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006fdL, "TRAILING_LINES_SIZE_CONFIG")));
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c006fdL, "TRAILING_LINES_SIZE_CONFIG")), sizeConfig);
              continue;
            }
          }
          if (configSingle.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a86e044dL, "ADDR_SEARCH_TERM")))) {
            String[] addrConfig = configSingle.split(":");
            if (platformCfgEntry.contains(addrConfig[1])) {
              int indexName = listConfigs.indexOf(platformCfgEntry);
              String addressConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a878e0e3L, "ADDRESS_PREFIX")) + addrConfig[2] + ",";
              String baseConfig = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a878e0faL, "PINBASE_PREFIX")) + addrConfig[3] + ",";
              String bitmapConfig1 = "\t\t" + SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a878e112L, "PINBITMAP_PREFIX"));
              String[] bitmapConfig2Split = addrConfig[4].split(",");

              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c00725L, "TRAILING_LINES_ADDR_CONFIG")));
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c00725L, "TRAILING_LINES_ADDR_CONFIG")), addressConfig);
              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0074eL, "TRAILING_LINES_PINBASE_CONFIG")));
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c0074eL, "TRAILING_LINES_PINBASE_CONFIG")), baseConfig);
              finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c007ccL, "TRAILING_LINES_PINBITMAP_CONFIG_1")));
              finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c007ccL, "TRAILING_LINES_PINBITMAP_CONFIG_1")), bitmapConfig1);
              for (int i = 0; i < bitmapConfig2Split.length; i++) {
                finalList.remove(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c007f7L, "TRAILING_LINES_PINBITMAP_CONFIG_2")) + i);
                finalList.add(indexName + SPropertyOperations.getInteger(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8c007f7L, "TRAILING_LINES_PINBITMAP_CONFIG_2")) + i, (i + 1 < bitmapConfig2Split.length ? "\t\t\t" + bitmapConfig2Split[i] + "," : "\t\t\t" + bitmapConfig2Split[i]));
              }
              continue;
            }
          }
        }
      }
      Files.write(out, finalList);
      return finalList;
    } catch (Exception ex) {
      return new LinkedList<String>();
    }
  }
  /*package*/ static String calculateCoreBitmask_id7Q_dLX5or$(@NotNull SNode __thisNode__, String coreConfig) {

    String coreConfigMain = coreConfig.replace(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8655394L, "CORE_STRING_PREFIX")), "").replace("]", "");
    String[] coreConfigSplit = coreConfigMain.split(",");
    String bitmask = "000000";
    char[] arrBitmask = bitmask.toCharArray();
    BitSet set = new BitSet(6);
    for (String coreConf : coreConfigSplit) {
      arrBitmask[Math.abs(Integer.parseInt(coreConf))] = '1';
    }
    int inc = 0;
    for (int i = (arrBitmask.length - 1); i >= 0; i--) {
      if (arrBitmask[i] == '1') {
        set.set(inc++, true);
        continue;
      }
      set.set(inc++, false);
    }
    return String.format("0x%01X", new Long(set.toLongArray()[0]));
  }
  /*package*/ static void saveIntermediaryLanguageToFile_id3rFqjaCkqqw(@NotNull SNode __thisNode__, Deque<String> entries) {
    Path p = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a88ca932L, "HYPERVISOR_CONFIG_OUTPUT_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8984ce5L, "HYPERVISOR_META_FILE_NAME")));
    try {
      Files.write(p, entries);
    } catch (Exception ex) {
    }
  }

  /*package*/ Platform__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((LinkedList<String>) configurePV_id2XWNstok1Pg(node, (Deque<String>) parameters[0]));
      case 1:
        return (T) ((String) calculateCoreBitmask_id7Q_dLX5or$(node, (String) parameters[0]));
      case 2:
        saveIntermediaryLanguageToFile_id3rFqjaCkqqw(node, (Deque<String>) parameters[0]);
        return null;
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
