package CISTER.behavior;

/*Generated by MPS */

import jetbrains.mps.core.aspects.behaviour.BaseBHDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.core.aspects.behaviour.api.BehaviorRegistry;
import jetbrains.mps.smodel.language.ConceptRegistry;
import jetbrains.mps.core.aspects.behaviour.api.SMethod;
import java.util.LinkedList;
import jetbrains.mps.core.aspects.behaviour.SMethodBuilder;
import jetbrains.mps.core.aspects.behaviour.SJavaCompoundTypeImpl;
import jetbrains.mps.core.aspects.behaviour.SModifiersImpl;
import jetbrains.mps.core.aspects.behaviour.AccessPrivileges;
import java.util.Deque;
import java.util.List;
import java.util.Arrays;
import org.jetbrains.annotations.NotNull;
import org.jetbrains.mps.openapi.model.SNode;
import java.nio.file.Path;
import java.nio.file.FileSystems;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import java.nio.file.Files;
import jetbrains.mps.core.aspects.behaviour.api.SConstructor;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.core.aspects.behaviour.api.BHMethodNotFoundException;

public final class Refinement__BehaviorDescriptor extends BaseBHDescriptor {
  private static final SAbstractConcept CONCEPT = MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, "CISTER.structure.Refinement");
  private static final BehaviorRegistry REGISTRY = ConceptRegistry.getInstance().getBehaviorRegistry();

  public static final SMethod<LinkedList<String>> configure_id2XWNsto2pEs = new SMethodBuilder<LinkedList<String>>(new SJavaCompoundTypeImpl(LinkedList.class)).name("configure").modifiers(SModifiersImpl.create(0, AccessPrivileges.PUBLIC)).concept(CONCEPT).id("2XWNsto2pEs").registry(REGISTRY).build(SMethodBuilder.createJavaParameter((Class<Deque<String>>) ((Class) Object.class), ""), SMethodBuilder.createJavaParameter(Boolean.TYPE, ""));

  private static final List<SMethod<?>> BH_METHODS = Arrays.<SMethod<?>>asList(configure_id2XWNsto2pEs);

  private static void ___init___(@NotNull SNode __thisNode__) {
  }

  /*package*/ static LinkedList<String> configure_id2XWNsto2pEs(@NotNull SNode __thisNode__, Deque<String> config, boolean denyAll) {
    try {
      Path p = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8ce809cL, "KERNEL_CONFIG_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8ce80ccL, "KERNEL_CONFIG_FILE_NAME")));
      Path out = FileSystems.getDefault().getPath(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8ce80fdL, "KERNEL_CONFIG_OUTPUT_FILE_PATH")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8ce812fL, "KERNEL_CONFIG_OUTPUT_FILE_NAME")));
      List<String> list = Files.readAllLines(p);
      LinkedList<String> listConfigs = new LinkedList(list);
      LinkedList<String> finalList = new LinkedList(list);
      for (String kernelCfgEntry : listConfigs) {
        for (String configSingle : config) {
          if (kernelCfgEntry.contains(configSingle.toUpperCase()) && kernelCfgEntry.contains("is not set")) {
            String newEntry = kernelCfgEntry.replace(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8d096d4L, "KERNEL_NOT_SET")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8d09708L, "KERNEL_ALLOW_TERM"))).replace("# ", "");
            int index = listConfigs.indexOf(kernelCfgEntry);
            finalList.remove(index);
            finalList.add(index, newEntry);
            continue;
          }
          if (denyAll && kernelCfgEntry.contains(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8d09708L, "KERNEL_ALLOW_TERM"))) && !(kernelCfgEntry.contains(configSingle.toUpperCase()))) {
            String newEntry = "# " + kernelCfgEntry.replace(SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8d09708L, "KERNEL_ALLOW_TERM")), SPropertyOperations.getString(__thisNode__, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L, 0x36eb6932a8d096d4L, "KERNEL_NOT_SET")));
            int index = listConfigs.indexOf(kernelCfgEntry);
            finalList.remove(index);
            finalList.add(index, newEntry);
          }
        }
      }
      Files.write(out, finalList);
      return finalList;
    } catch (Exception ex) {
      return null;
    }
  }

  /*package*/ Refinement__BehaviorDescriptor() {
    super(REGISTRY);
  }

  @Override
  protected void initNode(@NotNull SNode node, @NotNull SConstructor constructor, @Nullable Object[] parameters) {
    ___init___(node);
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SNode node, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      case 0:
        return (T) ((LinkedList<String>) configure_id2XWNsto2pEs(node, (Deque<String>) parameters[0], ((boolean) (Boolean) parameters[1])));
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @Override
  protected <T> T invokeSpecial0(@NotNull SAbstractConcept concept, @NotNull SMethod<T> method, @Nullable Object[] parameters) {
    int methodIndex = BH_METHODS.indexOf(method);
    if (methodIndex < 0) {
      throw new BHMethodNotFoundException(this, method);
    }
    switch (methodIndex) {
      default:
        throw new BHMethodNotFoundException(this, method);
    }
  }

  @NotNull
  @Override
  public List<SMethod<?>> getDeclaredMethods() {
    return BH_METHODS;
  }

  @NotNull
  @Override
  public SAbstractConcept getConcept() {
    return CONCEPT;
  }
}
