package CISTER.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseConstraintsAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConstraintsDescriptor;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.lang.smodel.ConceptSwitchIndex;
import jetbrains.mps.lang.smodel.ConceptSwitchIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;

public class ConstraintsAspectDescriptor extends BaseConstraintsAspectDescriptor {
  public ConstraintsAspectDescriptor() {
  }

  @Override
  public ConstraintsDescriptor getConstraints(SAbstractConcept concept) {
    SAbstractConcept cncpt = concept;
    switch (conceptIndex.index(cncpt)) {
      case 0:
        return new Channel_Constraints();
      case 1:
        return new Constants_Constraints();
      case 2:
        return new CoreAtom_Constraints();
      case 3:
        return new IRQChipDefinition_Constraints();
      case 4:
        return new MemoryRegion_Constraints();
      case 5:
        return new View_Constraints();
      default:
    }
    return new BaseConstraintsDescriptor(concept);
  }
  private static final ConceptSwitchIndex conceptIndex = new ConceptSwitchIndexBuilder().put(MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2255aL), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L), MetaIdFactory.conceptId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL)).seal();
}
