package CISTER.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.internal.collections.runtime.ListSequence;

public class CoreAtom_Constraints extends BaseConstraintsDescriptor {
  public CoreAtom_Constraints() {
    super(MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L, "CISTER.structure.CoreAtom"));
  }

  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L, 0x2f7ccdc758475d79L, "identifier"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L, 0x2f7ccdc758475d79L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "identifier";
        {
          SNode viewRef = SNodeOperations.getParent(SNodeOperations.getParent(SNodeOperations.getParent(node)));
          SNode vRef = (SNode) viewRef;
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor"))) {
            for (SNode part : SLinkOperations.getChildren(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22554L, "Partition"))) {
              for (SNode coreAtom : SLinkOperations.getChildren(SLinkOperations.getTarget(part, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L, 0x2f7ccdc758475daeL, "Cores")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d41L, 0x2f7ccdc758475d9aL, "cores"))) {
                if (node != coreAtom && (SPropertyOperations.getInteger(propertyValue)) == SPropertyOperations.getInteger(coreAtom, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L, 0x2f7ccdc758475d79L, "identifier"))) {
                  return false;
                }
              }
            }
            SNode refinementRef = SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22545L, "Refinement"));
            if (ListSequence.fromList(SLinkOperations.getChildren(SLinkOperations.getTarget(refinementRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x1f694dc7b55500aL, "Cores")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d41L, 0x2f7ccdc758475d9aL, "cores"))).contains(node)) {
              return false;
            }

          }
          return true;
        }
      }
    });
    return properties;
  }
}
