package CISTER.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;

public class IRQChipDefinition_Constraints extends BaseConstraintsDescriptor {
  private static final Logger LOG = LogManager.getLogger(IRQChipDefinition_Constraints.class);
  public IRQChipDefinition_Constraints() {
    super(MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, "CISTER.structure.IRQChipDefinition"));
  }

  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7df282e0L, "target"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7df282e0L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "target";
        {
          SNode viewRef = SNodeOperations.getParent(SNodeOperations.getParent(node));
          SNode vRef = (SNode) viewRef;
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor"))) {
            for (SNode part : SLinkOperations.getChildren(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22554L, "Partition"))) {
              for (SNode irqDef : SLinkOperations.getChildren(part, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L, 0x1f694dc7df017a6L, "irqChips"))) {
                if (node != irqDef && SPropertyOperations.getString(irqDef, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7df282e0L, "target")) != null && SPropertyOperations.getString(irqDef, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7df282e0L, "target")).equals((SPropertyOperations.getString(propertyValue)))) {
                  return false;
                }
              }
            }
          }
          return true;
        }
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL, "address"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "address";
        try {
          SNode viewRef = SNodeOperations.getParent(SNodeOperations.getParent(node));
          SNode vRef = (SNode) viewRef;
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor"))) {
            SNode sandBoxRef = SNodeOperations.getParent(vRef);
            SNode sRef = ((SNode) sandBoxRef);
            for (SNode view : SLinkOperations.getChildren(sRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2c867L, 0x4b6096e70ef342a2L, "View"))) {
              if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL, "CISTER.structure.Platform"))) {
                for (SNode irqDef : SLinkOperations.getChildren(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22545L, "Refinement")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x1f694dc7def4922L, "irqchips"))) {
                  if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7df282e0L, "target")).equals(SPropertyOperations.getString(irqDef, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7df282e0L, "target")))) {
                    if (Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) != Long.parseLong(SPropertyOperations.getString(irqDef, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL, "address")).substring(2), 16)) {
                      return false;
                    }
                    return true;

                  }
                }
              }
            }
          }
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL, "CISTER.structure.Platform")) && SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL, "address")) != null) {
            for (SNode irqDef : SLinkOperations.getChildren(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22545L, "Refinement")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x1f694dc7def4922L, "irqchips"))) {
              if (node != irqDef) {
                long addrStart = Long.parseLong(SPropertyOperations.getString(irqDef, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL, "address")).substring(2), 16);
                if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL, "address")) != null && Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) == Long.parseLong(SPropertyOperations.getString(irqDef, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL, "address")).substring(2), 16)) {
                  if (LOG.isEnabledFor(Level.WARN)) {
                    LoggingRuntime.legacyLog(Level.WARN, Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) + ":" + addrStart, IRQChipDefinition_Constraints.class, null);
                  }
                  return false;
                }
              }
            }
          }
        } catch (Exception ex) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LoggingRuntime.legacyLog(Level.WARN, "", IRQChipDefinition_Constraints.class, ex);
          }
          return false;
        }
        return true;
      }
    });
    return properties;
  }
}
