package CISTER.constraints;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.base.BaseConstraintsDescriptor;
import org.apache.log4j.Logger;
import org.apache.log4j.LogManager;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import java.util.Map;
import org.jetbrains.mps.openapi.language.SProperty;
import jetbrains.mps.smodel.runtime.PropertyConstraintsDescriptor;
import java.util.HashMap;
import jetbrains.mps.smodel.runtime.base.BasePropertyConstraintsDescriptor;
import jetbrains.mps.smodel.adapter.ids.MetaIdFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import org.apache.log4j.Level;
import jetbrains.mps.baseLanguage.logging.runtime.model.LoggingRuntime;

public class MemoryRegion_Constraints extends BaseConstraintsDescriptor {
  private static final Logger LOG = LogManager.getLogger(MemoryRegion_Constraints.class);
  public MemoryRegion_Constraints() {
    super(MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, "CISTER.structure.MemoryRegion"));
  }

  @Override
  protected Map<SProperty, PropertyConstraintsDescriptor> getSpecifiedProperties() {
    Map<SProperty, PropertyConstraintsDescriptor> properties = new HashMap<SProperty, PropertyConstraintsDescriptor>();
    properties.put(MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "memStart";
        try {
          SNode viewRef = SNodeOperations.getParent(SNodeOperations.getParent(node));
          SNode vRef = (SNode) viewRef;
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor"))) {
            SNode sandBoxRef = SNodeOperations.getParent(vRef);
            SNode sRef = ((SNode) sandBoxRef);
            for (SNode view : SLinkOperations.getChildren(sRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2c867L, 0x4b6096e70ef342a2L, "View"))) {
              if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL, "CISTER.structure.Platform"))) {
                for (SNode memReg : SLinkOperations.getChildren(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22545L, "Refinement")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0xf38a1310fcfa82fL, "memRegions"))) {
                  if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).equals(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")))) {
                    if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).equals("RAM") || SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).equals("IVSHMEM")) {
                      if (Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) < Long.parseLong(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart")).substring(2), 16)) {

                        return false;
                      }
                      return true;
                    }
                    if (Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) != Long.parseLong(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart")).substring(2), 16)) {
                      return false;
                    }
                    return true;

                  }
                }
              }
            }
          }
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL, "CISTER.structure.Platform")) && SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart")) != null) {
            for (SNode memReg : SLinkOperations.getChildren(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22545L, "Refinement")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0xf38a1310fcfa82fL, "memRegions"))) {
              if (node != memReg) {
                long memStart = Long.parseLong(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart")).substring(2), 16) + Long.parseLong(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310facc22dL, "size")).substring(2), 16);
                if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart")) != null && Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) >= Long.parseLong(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart")).substring(2), 16) && Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) < memStart) {
                  if (LOG.isEnabledFor(Level.WARN)) {
                    LoggingRuntime.legacyLog(Level.WARN, Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) + ":" + memStart, MemoryRegion_Constraints.class, null);
                  }
                  return false;
                }

              }
            }
          }
        } catch (Exception ex) {
          if (LOG.isEnabledFor(Level.WARN)) {
            LoggingRuntime.legacyLog(Level.WARN, "", MemoryRegion_Constraints.class, ex);
          }
          return false;
        }
        return true;
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062eL, "virtStart"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062eL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "virtStart";
        try {
          SNode viewRef = SNodeOperations.getParent(SNodeOperations.getParent(node));
          SNode vRef = (SNode) viewRef;
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor"))) {
            SNode sandBoxRef = SNodeOperations.getParent(vRef);
            SNode sRef = ((SNode) sandBoxRef);
            for (SNode view : SLinkOperations.getChildren(sRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2c867L, 0x4b6096e70ef342a2L, "View"))) {
              if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL, "CISTER.structure.Platform"))) {
                for (SNode memReg : SLinkOperations.getChildren(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22545L, "Refinement")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0xf38a1310fcfa82fL, "memRegions"))) {
                  if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).equals(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")))) {
                    if (Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) < Long.parseLong(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062eL, "virtStart")).substring(2), 16)) {
                      return false;
                    }
                  }
                }
              }
            }
          }
        } catch (Exception ex) {
          return false;
        }
        return true;
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310facc22dL, "size"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310facc22dL), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "size";
        try {
          if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).contains("RAM") || SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).contains("IVSHMEM")) {
            SNode viewRef = SNodeOperations.getParent(SNodeOperations.getParent(node));
            SNode vRef = (SNode) viewRef;
            if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL, "CISTER.structure.Platform"))) {
              return true;
            }
            SNode sandBoxRef = SNodeOperations.getParent(vRef);
            SNode sRef = ((SNode) sandBoxRef);
            long total = 0L;
            if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor"))) {
              for (SNode view : SLinkOperations.getChildren(sRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2c867L, 0x4b6096e70ef342a2L, "View"))) {
                if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor"))) {
                  for (SNode partition : SLinkOperations.getChildren(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22554L, "Partition"))) {
                    for (SNode memReg : SLinkOperations.getChildren(partition, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L, 0xf38a1310f9f0680L, "MemoryRegion"))) {
                      if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).equals(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target"))) && memReg != node) {
                        total += Long.parseLong(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310facc22dL, "size")).substring(2), 16);
                      }
                    }
                  }
                }
              }
            }
            for (SNode view : SLinkOperations.getChildren(sRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2c867L, 0x4b6096e70ef342a2L, "View"))) {
              if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL, "CISTER.structure.Platform"))) {
                for (SNode memReg : SLinkOperations.getChildren(SLinkOperations.getTarget(view, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22545L, "Refinement")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0xf38a1310fcfa82fL, "memRegions"))) {
                  if (SPropertyOperations.getString(node, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).equals(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")))) {
                    if (total + Long.parseLong((SPropertyOperations.getString(propertyValue)).substring(2), 16) > Long.parseLong(SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310facc22dL, "size")).substring(2), 16)) {
                      return false;
                    }
                  }
                }
              }
            }
          }
        } catch (Exception ex) {
          return false;
        }
        return true;
      }
    });
    properties.put(MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target"), new BasePropertyConstraintsDescriptor(MetaIdFactory.propId(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L), this) {
      @Override
      public boolean hasOwnValidator() {
        return true;
      }
      @Override
      public boolean validateValue(SNode node, String propertyValue) {
        String propertyName = "target";
        {
          SNode viewRef = SNodeOperations.getParent(SNodeOperations.getParent(node));
          SNode vRef = (SNode) viewRef;
          if (SNodeOperations.isInstanceOf(SLinkOperations.getTarget(SLinkOperations.getTarget(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22576L, "Extends")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")), MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL, "CISTER.structure.Hypervisor"))) {
            for (SNode part : SLinkOperations.getChildren(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22554L, "Partition"))) {
              for (SNode memReg : SLinkOperations.getChildren(part, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L, 0xf38a1310f9f0680L, "MemoryRegion"))) {
                if (node != memReg && SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")) != null && SPropertyOperations.getString(memReg, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")).equals((SPropertyOperations.getString(propertyValue))) && !(((SPropertyOperations.getString(propertyValue)).equals("RAM") || (SPropertyOperations.getString(propertyValue)).equals("IVSHMEM")))) {
                  return false;
                }
              }
            }
          }
          return true;
        }
      }
    });
    return properties;
  }
}
