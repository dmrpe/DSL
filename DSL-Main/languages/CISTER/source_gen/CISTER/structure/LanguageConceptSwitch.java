package CISTER.structure;

/*Generated by MPS */

import jetbrains.mps.lang.smodel.LanguageConceptIndex;
import jetbrains.mps.lang.smodel.LanguageConceptIndexBuilder;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;

public final class LanguageConceptSwitch {
  private final LanguageConceptIndex myIndex;
  public static final int Allow = 0;
  public static final int Application = 1;
  public static final int Boot = 2;
  public static final int Channel = 3;
  public static final int Check = 4;
  public static final int Connect = 5;
  public static final int Constants = 6;
  public static final int CoreAtom = 7;
  public static final int Cores = 8;
  public static final int Deployment = 9;
  public static final int Extends = 10;
  public static final int Hypervisor = 11;
  public static final int IRQChipDefinition = 12;
  public static final int Import = 13;
  public static final int Install = 14;
  public static final int InstallTableLines = 15;
  public static final int MemoryRegion = 16;
  public static final int Monitor = 17;
  public static final int Node = 18;
  public static final int OperatingSystem = 19;
  public static final int Partition = 20;
  public static final int PciDevices = 21;
  public static final int Permissions = 22;
  public static final int PinBitmap = 23;
  public static final int Platform = 24;
  public static final int ROS = 25;
  public static final int ROSNode = 26;
  public static final int Refinement = 27;
  public static final int Sandbox = 28;
  public static final int StringConcept = 29;
  public static final int Task = 30;
  public static final int Topic = 31;
  public static final int TopicInNode = 32;
  public static final int View = 33;
  public static final int Views = 34;

  public LanguageConceptSwitch() {
    LanguageConceptIndexBuilder builder = new LanguageConceptIndexBuilder(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L);
    builder.put(0x4b6096e70ef2256bL, Allow);
    builder.put(0x4f8af7c49eb22039L, Application);
    builder.put(0x4b6096e70ef2209fL, Boot);
    builder.put(0x4b6096e70ef2255aL, Channel);
    builder.put(0x4b6096e70ef220a1L, Check);
    builder.put(0x1f694dc7ea31162L, Connect);
    builder.put(0x1b7dc83df60b6d81L, Constants);
    builder.put(0x2f7ccdc758475d78L, CoreAtom);
    builder.put(0x2f7ccdc758475d41L, Cores);
    builder.put(0x4b6096e70ef2209cL, Deployment);
    builder.put(0x4b6096e70ef22575L, Extends);
    builder.put(0x2f7ccdc7584b9cccL, Hypervisor);
    builder.put(0x1f694dc7def48deL, IRQChipDefinition);
    builder.put(0x4b6096e70ef22562L, Import);
    builder.put(0x4b6096e70ef2209eL, Install);
    builder.put(0x36eb6932a9704604L, InstallTableLines);
    builder.put(0xf38a1310f9f0629L, MemoryRegion);
    builder.put(0x4b6096e70ef22580L, Monitor);
    builder.put(0x4b6096e70ef2209dL, Node);
    builder.put(0x36eb6932a8f3f406L, OperatingSystem);
    builder.put(0x4b6096e70ef22553L, Partition);
    builder.put(0x1b7dc83df55fdb27L, PciDevices);
    builder.put(0x1f694dc7ea3119fL, Permissions);
    builder.put(0x1f694dc7e5311ffL, PinBitmap);
    builder.put(0x2f7ccdc7580600feL, Platform);
    builder.put(0x4f8af7c49eb9863cL, ROS);
    builder.put(0x4f8af7c49ecf4126L, ROSNode);
    builder.put(0x4b6096e70ef2209bL, Refinement);
    builder.put(0x4b6096e70ef2c867L, Sandbox);
    builder.put(0x1f694dc7e5e2199L, StringConcept);
    builder.put(0x4b6096e70ef220a0L, Task);
    builder.put(0x4f8af7c49eb9863bL, Topic);
    builder.put(0x4f8af7c49ecf4136L, TopicInNode);
    builder.put(0x4b6096e70ef2209aL, View);
    builder.put(0x2f7ccdc758015dfaL, Views);
    myIndex = builder.seal();
  }

  /*package*/ int index(SConceptId cid) {
    return myIndex.index(cid);
  }

  public int index(SAbstractConcept concept) {
    return myIndex.index(concept);
  }
}
