package CISTER.structure;

/*Generated by MPS */

import jetbrains.mps.smodel.runtime.BaseStructureAspectDescriptor;
import jetbrains.mps.smodel.runtime.ConceptDescriptor;
import java.util.Collection;
import java.util.Arrays;
import org.jetbrains.annotations.Nullable;
import jetbrains.mps.smodel.adapter.ids.SConceptId;
import org.jetbrains.mps.openapi.language.SAbstractConcept;
import jetbrains.mps.smodel.runtime.impl.ConceptDescriptorBuilder2;
import jetbrains.mps.smodel.runtime.ConceptKind;
import jetbrains.mps.smodel.runtime.StaticScope;

public class StructureAspectDescriptor extends BaseStructureAspectDescriptor {
  /*package*/ final ConceptDescriptor myConceptAllow = createDescriptorForAllow();
  /*package*/ final ConceptDescriptor myConceptApplication = createDescriptorForApplication();
  /*package*/ final ConceptDescriptor myConceptBoot = createDescriptorForBoot();
  /*package*/ final ConceptDescriptor myConceptChannel = createDescriptorForChannel();
  /*package*/ final ConceptDescriptor myConceptCheck = createDescriptorForCheck();
  /*package*/ final ConceptDescriptor myConceptConnect = createDescriptorForConnect();
  /*package*/ final ConceptDescriptor myConceptConstants = createDescriptorForConstants();
  /*package*/ final ConceptDescriptor myConceptCoreAtom = createDescriptorForCoreAtom();
  /*package*/ final ConceptDescriptor myConceptCores = createDescriptorForCores();
  /*package*/ final ConceptDescriptor myConceptDeployment = createDescriptorForDeployment();
  /*package*/ final ConceptDescriptor myConceptExtends = createDescriptorForExtends();
  /*package*/ final ConceptDescriptor myConceptHypervisor = createDescriptorForHypervisor();
  /*package*/ final ConceptDescriptor myConceptIRQChipDefinition = createDescriptorForIRQChipDefinition();
  /*package*/ final ConceptDescriptor myConceptImport = createDescriptorForImport();
  /*package*/ final ConceptDescriptor myConceptInstall = createDescriptorForInstall();
  /*package*/ final ConceptDescriptor myConceptInstallTableLines = createDescriptorForInstallTableLines();
  /*package*/ final ConceptDescriptor myConceptMemoryRegion = createDescriptorForMemoryRegion();
  /*package*/ final ConceptDescriptor myConceptMonitor = createDescriptorForMonitor();
  /*package*/ final ConceptDescriptor myConceptNode = createDescriptorForNode();
  /*package*/ final ConceptDescriptor myConceptOperatingSystem = createDescriptorForOperatingSystem();
  /*package*/ final ConceptDescriptor myConceptPartition = createDescriptorForPartition();
  /*package*/ final ConceptDescriptor myConceptPciDevices = createDescriptorForPciDevices();
  /*package*/ final ConceptDescriptor myConceptPermissions = createDescriptorForPermissions();
  /*package*/ final ConceptDescriptor myConceptPinBitmap = createDescriptorForPinBitmap();
  /*package*/ final ConceptDescriptor myConceptPlatform = createDescriptorForPlatform();
  /*package*/ final ConceptDescriptor myConceptROS = createDescriptorForROS();
  /*package*/ final ConceptDescriptor myConceptROSNode = createDescriptorForROSNode();
  /*package*/ final ConceptDescriptor myConceptRefinement = createDescriptorForRefinement();
  /*package*/ final ConceptDescriptor myConceptSandbox = createDescriptorForSandbox();
  /*package*/ final ConceptDescriptor myConceptStringConcept = createDescriptorForStringConcept();
  /*package*/ final ConceptDescriptor myConceptTask = createDescriptorForTask();
  /*package*/ final ConceptDescriptor myConceptTopic = createDescriptorForTopic();
  /*package*/ final ConceptDescriptor myConceptTopicInNode = createDescriptorForTopicInNode();
  /*package*/ final ConceptDescriptor myConceptView = createDescriptorForView();
  /*package*/ final ConceptDescriptor myConceptViews = createDescriptorForViews();
  private final LanguageConceptSwitch myIndexSwitch;

  public StructureAspectDescriptor() {
    myIndexSwitch = new LanguageConceptSwitch();
  }

  @Override
  public Collection<ConceptDescriptor> getDescriptors() {
    return Arrays.asList(myConceptAllow, myConceptApplication, myConceptBoot, myConceptChannel, myConceptCheck, myConceptConnect, myConceptConstants, myConceptCoreAtom, myConceptCores, myConceptDeployment, myConceptExtends, myConceptHypervisor, myConceptIRQChipDefinition, myConceptImport, myConceptInstall, myConceptInstallTableLines, myConceptMemoryRegion, myConceptMonitor, myConceptNode, myConceptOperatingSystem, myConceptPartition, myConceptPciDevices, myConceptPermissions, myConceptPinBitmap, myConceptPlatform, myConceptROS, myConceptROSNode, myConceptRefinement, myConceptSandbox, myConceptStringConcept, myConceptTask, myConceptTopic, myConceptTopicInNode, myConceptView, myConceptViews);
  }

  @Override
  @Nullable
  public ConceptDescriptor getDescriptor(SConceptId id) {
    switch (myIndexSwitch.index(id)) {
      case LanguageConceptSwitch.Allow:
        return myConceptAllow;
      case LanguageConceptSwitch.Application:
        return myConceptApplication;
      case LanguageConceptSwitch.Boot:
        return myConceptBoot;
      case LanguageConceptSwitch.Channel:
        return myConceptChannel;
      case LanguageConceptSwitch.Check:
        return myConceptCheck;
      case LanguageConceptSwitch.Connect:
        return myConceptConnect;
      case LanguageConceptSwitch.Constants:
        return myConceptConstants;
      case LanguageConceptSwitch.CoreAtom:
        return myConceptCoreAtom;
      case LanguageConceptSwitch.Cores:
        return myConceptCores;
      case LanguageConceptSwitch.Deployment:
        return myConceptDeployment;
      case LanguageConceptSwitch.Extends:
        return myConceptExtends;
      case LanguageConceptSwitch.Hypervisor:
        return myConceptHypervisor;
      case LanguageConceptSwitch.IRQChipDefinition:
        return myConceptIRQChipDefinition;
      case LanguageConceptSwitch.Import:
        return myConceptImport;
      case LanguageConceptSwitch.Install:
        return myConceptInstall;
      case LanguageConceptSwitch.InstallTableLines:
        return myConceptInstallTableLines;
      case LanguageConceptSwitch.MemoryRegion:
        return myConceptMemoryRegion;
      case LanguageConceptSwitch.Monitor:
        return myConceptMonitor;
      case LanguageConceptSwitch.Node:
        return myConceptNode;
      case LanguageConceptSwitch.OperatingSystem:
        return myConceptOperatingSystem;
      case LanguageConceptSwitch.Partition:
        return myConceptPartition;
      case LanguageConceptSwitch.PciDevices:
        return myConceptPciDevices;
      case LanguageConceptSwitch.Permissions:
        return myConceptPermissions;
      case LanguageConceptSwitch.PinBitmap:
        return myConceptPinBitmap;
      case LanguageConceptSwitch.Platform:
        return myConceptPlatform;
      case LanguageConceptSwitch.ROS:
        return myConceptROS;
      case LanguageConceptSwitch.ROSNode:
        return myConceptROSNode;
      case LanguageConceptSwitch.Refinement:
        return myConceptRefinement;
      case LanguageConceptSwitch.Sandbox:
        return myConceptSandbox;
      case LanguageConceptSwitch.StringConcept:
        return myConceptStringConcept;
      case LanguageConceptSwitch.Task:
        return myConceptTask;
      case LanguageConceptSwitch.Topic:
        return myConceptTopic;
      case LanguageConceptSwitch.TopicInNode:
        return myConceptTopicInNode;
      case LanguageConceptSwitch.View:
        return myConceptView;
      case LanguageConceptSwitch.Views:
        return myConceptViews;
      default:
        return null;
    }
  }

  /*package*/ int internalIndex(SAbstractConcept c) {
    return myIndexSwitch.index(c);
  }

  private static ConceptDescriptor createDescriptorForAllow() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Allow", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2256bL);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741180267");
    b.version(2);
    b.prop("target", 0x2f7ccdc757ffc7afL, "3421836072953300911");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForApplication() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Application", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb22039L);
    b.class_(false, false, false);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758015dfaL);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5731665899630501945");
    b.version(2);
    b.alias("Views.Application");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForBoot() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Boot", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209fL);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741179039");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForChannel() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Channel", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2255aL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741180250");
    b.version(2);
    b.prop("size", 0x1f694dc7ea3119dL, "141464113047081373");
    b.prop("protocol", 0x1f694dc7ea311b4L, "141464113047081396");
    b.aggregate("connect", 0x1f694dc7ea3119bL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea31162L).optional(false).ordered(true).multiple(false).origin("141464113047081371").done();
    b.aggregate("permission", 0x1f694dc7ea311abL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea3119fL).optional(false).ordered(true).multiple(true).origin("141464113047081387").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCheck() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Check", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef220a1L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741179041");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConnect() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Connect", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea31162L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/141464113047081314");
    b.version(2);
    b.prop("from", 0x1f694dc7ea31163L, "141464113047081315");
    b.prop("to", 0x1f694dc7ea31165L, "141464113047081317");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForConstants() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Constants", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L);
    b.interface_();
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/1980959579559390593");
    b.version(2);
    b.prop("MAIN_PATH", 0x5f52caafd1400290L, "6868775238172148368");
    b.prop("CONST_PCI_DEVICE_IDENTIFIER_IVHSMEM", 0x1b7dc83df60bee93L, "1980959579559423635");
    b.prop("CELL_CONFIG_FILE_PATH", 0x36eb6932a8623315L, "3957372363869401877");
    b.prop("HYPERVISOR_CONFIG_FILE_PATH", 0x36eb6932a88ca912L, "3957372363872184594");
    b.prop("KERNEL_CONFIG_FILE_PATH", 0x36eb6932a8ce809cL, "3957372363876499612");
    b.prop("KERNEL_CONFIG_FILE_NAME", 0x36eb6932a8ce80ccL, "3957372363876499660");
    b.prop("INSTALL_CONFIG_FILE_NAME", 0x36eb6932a9a508ddL, "3957372363890559197");
    b.prop("INSTALL_CONFIG_META_FILE_NAME", 0x5f52caafd127764cL, "6868775238170539596");
    b.prop("INSTALL_CONFIG_FILE_PATH", 0x36eb6932a9a50913L, "3957372363890559251");
    b.prop("CELL_CONFIG_FILE_NAME", 0x36eb6932a8623318L, "3957372363869401880");
    b.prop("CELL_CONFIG_OUTPUT_FILE_NAME", 0x36eb6932a86a6351L, "3957372363869938513");
    b.prop("HYPERVISOR_CONFIG_OUTPUT_FILE_PATH", 0x36eb6932a88ca932L, "3957372363872184626");
    b.prop("ROS_TOPIC_OUTPUT_FILE_PATH", 0x3827d0cb5594d4afL, "4046432361948435631");
    b.prop("ROS_TOPIC_OUTPUT_FILE_NAME", 0x3827d0cb55950945L, "4046432361948449093");
    b.prop("ROS_TOPIC_SUB_OUTPUT_FILE_PATH", 0x40c10be72ded8728L, "4666023776468436776");
    b.prop("ROS_TOPIC_SUB_OUTPUT_FILE_NAME", 0x40c10be72ded87b5L, "4666023776468436917");
    b.prop("HYPERVISOR_CONFIG_FILE_NAME", 0x36eb6932a88ca953L, "3957372363872184659");
    b.prop("HYPERVISOR_CONFIG_OUTPUT_FILE_NAME", 0x36eb6932a88fed5dL, "3957372363872398685");
    b.prop("KERNEL_CONFIG_OUTPUT_FILE_PATH", 0x36eb6932a8ce80fdL, "3957372363876499709");
    b.prop("KERNEL_CONFIG_OUTPUT_FILE_NAME", 0x36eb6932a8ce812fL, "3957372363876499759");
    b.prop("CELL_META_FILE_NAME", 0x36eb6932a8840487L, "3957372363871618183");
    b.prop("HYPERVISOR_META_FILE_NAME", 0x36eb6932a8984ce5L, "3957372363872947429");
    b.prop("CORE_STRING_PREFIX", 0x36eb6932a8655394L, "3957372363869606804");
    b.prop("CONFIG_STRINGS_NAME_PREFIX", 0x36eb6932a86687d0L, "3957372363869685712");
    b.prop("CONFIG_STRINGS_MEMORY_PREFIX", 0x36eb6932a867294fL, "3957372363869727055");
    b.prop("CONFIG_STRINGS_ADDR_PREFIX", 0x36eb6932a8685d2dL, "3957372363869805869");
    b.prop("CONFIG_STRINGS_CHANNEL_PREFIX", 0x36eb6932a8685d35L, "3957372363869805877");
    b.prop("CONFIG_STRINGS_DEVICE_PREFIX", 0x36eb6932a8685d3eL, "3957372363869805886");
    b.prop("CORES_SEARCH_TERM", 0x36eb6932a86b2e0cL, "3957372363869990412");
    b.prop("CORES_SEARCH_TERM_IN_FILE", 0x36eb6932a86bc901L, "3957372363870030081");
    b.prop("NAME_SEARCH_TERM", 0x36eb6932a86e0420L, "3957372363870176288");
    b.prop("NAME_SEARCH_TERM_IN_FILE", 0x36eb6932a86e042eL, "3957372363870176302");
    b.prop("MEMORY_REG_SEARCH_TERM", 0x36eb6932a86e043dL, "3957372363870176317");
    b.prop("ADDR_SEARCH_TERM", 0x36eb6932a86e044dL, "3957372363870176333");
    b.prop("DEVICE_SEARCH_TERM", 0x36eb6932a871f27aL, "3957372363870433914");
    b.prop("CHANNEL_SEARCH_TERM", 0x36eb6932a871f28cL, "3957372363870433932");
    b.prop("PHYS_START_PREFIX", 0x36eb6932a874f5f0L, "3957372363870631408");
    b.prop("VIRT_START_PREFIX", 0x36eb6932a874f604L, "3957372363870631428");
    b.prop("SIZE_PREFIX", 0x36eb6932a8757a27L, "3957372363870665255");
    b.prop("ADDRESS_PREFIX", 0x36eb6932a878e0e3L, "3957372363870888163");
    b.prop("PINBASE_PREFIX", 0x36eb6932a878e0faL, "3957372363870888186");
    b.prop("PINBITMAP_PREFIX", 0x36eb6932a878e112L, "3957372363870888210");
    b.prop("REGION_PREFIX", 0x36eb6932a87ce52dL, "3957372363871151405");
    b.prop("FLAGS_PREFIX", 0x36eb6932a87fa4eeL, "3957372363871331566");
    b.prop("FLAGS_JAILHOUSE_READ", 0x36eb6932a8806345L, "3957372363871380293");
    b.prop("FLAGS_JAILHOUSE_WRITE", 0x36eb6932a8806361L, "3957372363871380321");
    b.prop("FLAGS_JAILHOUSE_SHARED", 0x36eb6932a880637eL, "3957372363871380350");
    b.prop("KERNEL_NOT_SET", 0x36eb6932a8d096d4L, "3957372363876636372");
    b.prop("KERNEL_ALLOW_TERM", 0x36eb6932a8d09708L, "3957372363876636424");
    b.prop("TRAILING_LINES_CORE_CONFIG", 0x36eb6932a8c0068bL, "3957372363875550859");
    b.prop("TRAILING_LINES_PHYS_CONFIG", 0x36eb6932a8c006b0L, "3957372363875550896");
    b.prop("TRAILING_LINES_VIRT_CONFIG", 0x36eb6932a8c006d6L, "3957372363875550934");
    b.prop("TRAILING_LINES_SIZE_CONFIG", 0x36eb6932a8c006fdL, "3957372363875550973");
    b.prop("TRAILING_LINES_ADDR_CONFIG", 0x36eb6932a8c00725L, "3957372363875551013");
    b.prop("TRAILING_LINES_PINBASE_CONFIG", 0x36eb6932a8c0074eL, "3957372363875551054");
    b.prop("TRAILING_LINES_PINBITMAP_CONFIG_1", 0x36eb6932a8c007ccL, "3957372363875551180");
    b.prop("TRAILING_LINES_PINBITMAP_CONFIG_2", 0x36eb6932a8c007f7L, "3957372363875551223");
    b.prop("TRAILING_LINES_REGION_CONFIG", 0x36eb6932a8c00823L, "3957372363875551267");
    b.prop("TRAILING_LINES_CHANNEL_SIZE_CONFIG", 0x36eb6932a8c00850L, "3957372363875551312");
    b.prop("TRAILING_LINES_FLAGS_CONFIG", 0x36eb6932a8c0087eL, "3957372363875551358");
    b.prop("KERNEL_VERSION_DOWNLOADS", 0x3489eacd0dd34d8eL, "3785815128202759566");
    b.prop("KERNEL_VERSION_DOWNLOADS_SEPARATOR", 0x3489eacd0dd41cd9L, "3785815128202812633");
    b.prop("BANANAPI_KCONFIG", 0x3489eacd0e887bdbL, "3785815128214633435");
    b.prop("KERNEL_COMPILE_TOOLCHAIN", 0x3489eacd0e88e779L, "3785815128214660985");
    b.prop("SCRIPTS_INJECTION_FILE_NAME", 0x3489eacd0ea4ab23L, "3785815128216480547");
    b.prop("INSTALL_MOD_PATH", 0x165d3ac4cb8df290L, "1611508858571584144");
    b.prop("IMAGE_BASE", 0x165d3ac4cb8e85e2L, "1611508858571621858");
    b.prop("IMAGE_OUT", 0x165d3ac4cb8e8620L, "1611508858571621920");
    b.prop("DOCKERFILE_OUT", 0x40c10be72dba2e1cL, "4666023776465071644");
    b.prop("DOCKERFILE_NAME", 0x40c10be72dba6414L, "4666023776465085460");
    b.prop("ROSTOPIC_IN", 0x40c10be72dcd30bcL, "4666023776466317500");
    b.prop("ROS_SUB_IN", 0x40c10be72ded2bcbL, "4666023776468413387");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCoreAtom() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "CoreAtom", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/3421836072957992312");
    b.version(2);
    b.prop("identifier", 0x2f7ccdc758475d79L, "3421836072957992313");
    b.prop("enabled", 0x2f7ccdc758475d7bL, "3421836072957992315");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForCores() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Cores", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d41L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/3421836072957992257");
    b.version(2);
    b.prop("quantity", 0x2f7ccdc758475d42L, "3421836072957992258");
    b.aggregate("cores", 0x2f7ccdc758475d9aL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L).optional(false).ordered(true).multiple(true).origin("3421836072957992346").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForDeployment() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Deployment", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209cL);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741179036");
    b.version(2);
    b.prop("target", 0x4b6096e70ef75405L, "5431507069741519877");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForExtends() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Extends", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741180277");
    b.version(2);
    b.aggregate("Target", 0x2f7ccdc75800fc99L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758015dfaL).optional(false).ordered(true).multiple(false).origin("3421836072953379993").done();
    b.alias("Extend");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForHypervisor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Hypervisor", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7584b9cccL);
    b.class_(false, false, false);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758015dfaL);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/3421836072958270668");
    b.version(2);
    b.alias("Views.Hypervisor");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForIRQChipDefinition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "IRQChipDefinition", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/141464113035299038");
    b.version(2);
    b.prop("address", 0x1f694dc7def48dfL, "141464113035299039");
    b.prop("pin_base", 0x1f694dc7def48e1L, "141464113035299041");
    b.prop("target", 0x1f694dc7df282e0L, "141464113035510496");
    b.aggregate("pinBitmap", 0x1f694dc7e53121dL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5311ffL).optional(false).ordered(true).multiple(false).origin("141464113041838621").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForImport() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Import", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22562L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741180258");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstall() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Install", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL);
    b.class_(false, false, false);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741179038");
    b.version(2);
    b.prop("OS", 0x36eb6932a9830a2aL, "3957372363888331306");
    b.prop("kernelVersion", 0x36eb6932a9830a30L, "3957372363888331312");
    b.prop("boardTarget", 0x3489eacd0db9501aL, "3785815128201056282");
    b.prop("preinstalled", 0x3489eacd0dbbefabL, "3785815128201228203");
    b.aggregate("targets", 0x36eb6932a8faefd5L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x36eb6932a9704604L).optional(false).ordered(true).multiple(true).origin("3957372363879411669").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForInstallTableLines() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "InstallTableLines", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x36eb6932a9704604L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/3957372363887101444");
    b.version(2);
    b.prop("descripton", 0x36eb6932a9704605L, "3957372363887101445");
    b.prop("value", 0x36eb6932a97047bcL, "3957372363887101884");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMemoryRegion() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "MemoryRegion", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/1096803741352265257");
    b.version(2);
    b.prop("memStart", 0xf38a1310f9f062cL, "1096803741352265260");
    b.prop("virtStart", 0xf38a1310f9f062eL, "1096803741352265262");
    b.prop("size", 0xf38a1310facc22dL, "1096803741353165357");
    b.prop("target", 0xf38a1310f9f0631L, "1096803741352265265");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForMonitor() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Monitor", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22580L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741180288");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Node", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209dL);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741179037");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForOperatingSystem() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "OperatingSystem", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x36eb6932a8f3f406L);
    b.class_(false, false, false);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758015dfaL);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/3957372363878953990");
    b.version(2);
    b.alias("Views.OS");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPartition() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Partition", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741180243");
    b.version(2);
    b.prop("OS", 0x2f7ccdc758475d38L, "3421836072957992248");
    b.prop("other", 0x2f7ccdc758491de3L, "3421836072958107107");
    b.aggregate("Cores", 0x2f7ccdc758475daeL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d41L).optional(false).ordered(true).multiple(false).origin("3421836072957992366").done();
    b.aggregate("MemoryRegion", 0xf38a1310f9f0680L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L).optional(false).ordered(true).multiple(true).origin("1096803741352265344").done();
    b.aggregate("irqChips", 0x1f694dc7df017a6L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL).optional(true).ordered(true).multiple(true).origin("141464113035351974").done();
    b.aggregate("pciDevices", 0x1b7dc83df55fdb33L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df55fdb27L).optional(true).ordered(true).multiple(true).origin("1980959579548146483").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPciDevices() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "PciDevices", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df55fdb27L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/1980959579548146471");
    b.version(2);
    b.prop("type", 0x1b7dc83df55fdb28L, "1980959579548146472");
    b.prop("region", 0x1b7dc83df55fdb30L, "1980959579548146480");
    b.aggregate("mask", 0x1b7dc83df55fdb2eL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5e2199L).optional(false).ordered(true).multiple(true).origin("1980959579548146478").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPermissions() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Permissions", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea3119fL);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/141464113047081375");
    b.version(2);
    b.prop("target", 0x1f694dc7ea311a0L, "141464113047081376");
    b.aggregate("permission", 0x1f694dc7ea311a9L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5e2199L).optional(false).ordered(true).multiple(true).origin("141464113047081385").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPinBitmap() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "PinBitmap", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5311ffL);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/141464113041838591");
    b.version(2);
    b.aggregate("inputs", 0x1f694dc7e5e21b0L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5e2199L).optional(false).ordered(true).multiple(true).origin("141464113042563504").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForPlatform() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Platform", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc7580600feL);
    b.class_(false, false, false);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758015dfaL);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/3421836072953708798");
    b.version(2);
    b.alias("Views.Platform");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForROS() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "ROS", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb9863cL);
    b.interface_();
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5731665899630986812");
    b.version(2);
    b.prop("properties", 0x4f8af7c49eb9863dL, "5731665899630986813");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForROSNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "ROSNode", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49ecf4126L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb9863cL);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5731665899632410918");
    b.version(2);
    b.prop("body", 0x4f8af7c49ecf4131L, "5731665899632410929");
    b.aggregate("topics", 0x4f8af7c49ecf4214L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49ecf4136L).optional(true).ordered(true).multiple(false).origin("5731665899632411156").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForRefinement() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Refinement", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL);
    b.class_(false, false, false);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1b7dc83df60b6d81L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741179035");
    b.version(2);
    b.prop("target", 0x2f7ccdc757fdad33L, "3421836072953163059");
    b.aggregate("allowList", 0x2f7ccdc7580dd5eeL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2256bL).optional(true).ordered(true).multiple(true).origin("3421836072954222062").done();
    b.aggregate("memRegions", 0xf38a1310fcfa82fL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L).optional(true).ordered(true).multiple(true).origin("1096803741355452463").done();
    b.aggregate("Cores", 0x1f694dc7b55500aL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d41L).optional(true).ordered(true).multiple(false).origin("141464112991653898").done();
    b.aggregate("irqchips", 0x1f694dc7def4922L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL).optional(true).ordered(true).multiple(true).origin("141464113035299106").done();
    b.aggregate("topics", 0x4f8af7c49eb9995fL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb9863bL).optional(true).ordered(true).multiple(true).origin("5731665899630991711").done();
    b.aggregate("nodes", 0x4f8af7c49ed6802bL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49ecf4126L).optional(true).ordered(true).multiple(true).origin("5731665899632885803").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForSandbox() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Sandbox", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2c867L);
    b.class_(false, false, true);
    b.super_("jetbrains.mps.baseLanguage.structure.ClassConcept", 0xf3061a5392264cc5L, 0xa443f952ceaf5816L, 0xf8c108ca66L);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741221991");
    b.version(2);
    b.aggregate("View", 0x4b6096e70ef342a2L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL).optional(false).ordered(true).multiple(true).origin("5431507069741253282").done();
    b.kind(ConceptKind.INTERFACE, StaticScope.GLOBAL);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForStringConcept() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "StringConcept", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5e2199L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/141464113042563481");
    b.version(2);
    b.prop("value", 0x1f694dc7e5e219aL, "141464113042563482");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTask() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Task", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef220a0L);
    b.class_(false, false, false);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741179040");
    b.version(2);
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTopic() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Topic", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb9863bL);
    b.class_(false, false, false);
    b.parent(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49eb9863cL);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5731665899630986811");
    b.version(2);
    b.prop("path", 0x4f8af7c49eb98649L, "5731665899630986825");
    b.prop("type", 0x4f8af7c49eb9864bL, "5731665899630986827");
    b.alias("ROS.Topic");
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForTopicInNode() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "TopicInNode", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4f8af7c49ecf4136L);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5731665899632410934");
    b.version(2);
    b.aggregate("flags", 0x4f8af7c49ecf4139L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7ea3119fL).optional(true).ordered(true).multiple(true).origin("5731665899632410937").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForView() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "View", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL);
    b.class_(false, false, false);
    b.parent(0xceab519525ea4f22L, 0x9b92103b95ca8c0cL, 0x110396eaaa4L);
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/5431507069741179034");
    b.version(2);
    b.aggregate("Extends", 0x4b6096e70ef22576L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L).optional(true).ordered(true).multiple(false).origin("5431507069741180278").done();
    b.aggregate("Import", 0x4b6096e70ef22563L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22562L).optional(true).ordered(true).multiple(false).origin("5431507069741180259").done();
    b.aggregate("Refinement", 0x4b6096e70ef22545L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL).optional(true).ordered(true).multiple(false).origin("5431507069741180229").done();
    b.aggregate("Deployment", 0x4b6096e70ef22547L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209cL).optional(true).ordered(true).multiple(false).origin("5431507069741180231").done();
    b.aggregate("Node", 0x4b6096e70ef2254aL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209dL).optional(true).ordered(true).multiple(false).origin("5431507069741180234").done();
    b.aggregate("Install", 0x4b6096e70ef2254eL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL).optional(true).ordered(true).multiple(false).origin("5431507069741180238").done();
    b.aggregate("Partition", 0x4b6096e70ef22554L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22553L).optional(true).ordered(true).multiple(true).origin("5431507069741180244").done();
    b.aggregate("Channel", 0x4b6096e70ef2255bL).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2255aL).optional(true).ordered(true).multiple(true).origin("5431507069741180251").done();
    b.aggregate("Monitor", 0x4b6096e70ef22581L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22580L).optional(true).ordered(true).multiple(false).origin("5431507069741180289").done();
    return b.create();
  }
  private static ConceptDescriptor createDescriptorForViews() {
    ConceptDescriptorBuilder2 b = new ConceptDescriptorBuilder2("CISTER", "Views", 0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758015dfaL);
    b.interface_();
    b.origin("r:91922811-1524-43e4-96d0-cba85433d637(CISTER.structure)/3421836072953404922");
    b.version(2);
    b.prop("properties", 0x2f7ccdc758015dfbL, "3421836072953404923");
    b.associate("refNode", 0x2f7ccdc758941fe8L).target(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL).optional(true).origin("3421836072963022824").done();
    return b.create();
  }
}
