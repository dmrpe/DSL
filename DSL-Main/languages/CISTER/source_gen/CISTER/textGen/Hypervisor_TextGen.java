package CISTER.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import CISTER.behavior.Hypervisor__BehaviorDescriptor;

public class Hypervisor_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    SNode viewRef = SNodeOperations.getParent(SNodeOperations.getParent(ctx.getPrimaryInput()));
    SNode vRef = ((SNode) viewRef);
    Deque<SNode> partitionPropsList = LinkedListSequence.fromLinkedListNew(new LinkedList<SNode>());
    for (SNode partition : SLinkOperations.getChildren(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef22554L, "Partition"))) {
      LinkedListSequence.fromLinkedListNew(partitionPropsList).addElement(partition);
    }
    Deque<SNode> channelPropsList = LinkedListSequence.fromLinkedListNew(new LinkedList<SNode>());
    for (SNode channel : SLinkOperations.getChildren(vRef, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209aL, 0x4b6096e70ef2255bL, "Channel"))) {
      LinkedListSequence.fromLinkedListNew(channelPropsList).addElement(channel);
    }
    for (String configLine : Hypervisor__BehaviorDescriptor.configureHV_id2XWNstojUc_.invoke(ctx.getPrimaryInput(), partitionPropsList, channelPropsList)) {
      tgs.append(configLine);
      tgs.newLine();
    }
  }
}
