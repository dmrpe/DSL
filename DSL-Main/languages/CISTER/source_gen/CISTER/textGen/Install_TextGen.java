package CISTER.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import java.util.LinkedList;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import CISTER.behavior.Install__BehaviorDescriptor;

public class Install_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    tgs.append("#### START_INSTALL_INFORMATION ####");
    tgs.newLine();
    Deque<String> configs = LinkedListSequence.fromLinkedListNew(new LinkedList<String>());
    LinkedListSequence.fromLinkedListNew(configs).addElement("OS:" + SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL, 0x36eb6932a9830a2aL, "OS")));
    LinkedListSequence.fromLinkedListNew(configs).addElement("kernel:" + SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL, 0x36eb6932a9830a30L, "kernelVersion")));
    LinkedListSequence.fromLinkedListNew(configs).addElement("target:" + SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL, 0x3489eacd0db9501aL, "boardTarget")) + ":" + SPropertyOperations.getBoolean(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL, 0x3489eacd0dbbefabL, "preinstalled")));
    for (SNode lines : SLinkOperations.getChildren(ctx.getPrimaryInput(), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209eL, 0x36eb6932a8faefd5L, "targets"))) {
      LinkedListSequence.fromLinkedListNew(configs).addElement("line:" + SPropertyOperations.getString(lines, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x36eb6932a9704604L, 0x36eb6932a9704605L, "descripton")) + ":" + SPropertyOperations.getString(lines, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x36eb6932a9704604L, 0x36eb6932a97047bcL, "value")));
    }
    for (String scriptLine : Install__BehaviorDescriptor.configureInstall_id3rFqjaDB8aR.invoke(ctx.getPrimaryInput(), configs)) {
      tgs.append(scriptLine);
      tgs.newLine();
    }
    tgs.append("#### END_INSTALL_INFORMATION ####");
    tgs.newLine();

  }
}
