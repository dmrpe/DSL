package CISTER.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import java.util.LinkedList;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import CISTER.behavior.Platform__BehaviorDescriptor;

public class Platform_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    Deque<String> allowStringList = LinkedListSequence.fromLinkedListNew(new LinkedList<String>());
    SNode refinementRef = ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(SNodeOperations.getParent(ctx.getPrimaryInput())))).findFirst(new IWhereFilter<SNode>() {
      public boolean accept(SNode it) {
        return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, "CISTER.structure.Refinement"));
      }
    });
    SNode ref = ((SNode) refinementRef);
    for (SNode allows : SLinkOperations.getChildren(ref, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x2f7ccdc7580dd5eeL, "allowList"))) {
      LinkedListSequence.fromLinkedListNew(allowStringList).addElement(SPropertyOperations.getString(allows, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2256bL, 0x2f7ccdc757ffc7afL, "target")).toString());
    }
    String coresString = "cores[";
    for (SNode coresSingle : SLinkOperations.getChildren(SLinkOperations.getTarget(ref, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x1f694dc7b55500aL, "Cores")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d41L, 0x2f7ccdc758475d9aL, "cores"))) {
      coresString += String.valueOf(SPropertyOperations.getInteger(coresSingle, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x2f7ccdc758475d78L, 0x2f7ccdc758475d79L, "identifier"))) + ",";
    }
    LinkedListSequence.fromLinkedListNew(allowStringList).addElement(coresString.substring(0, coresString.length() - 1) + "]");

    for (SNode regionNode : SLinkOperations.getChildren(ref, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0xf38a1310fcfa82fL, "memRegions"))) {
      LinkedListSequence.fromLinkedListNew(allowStringList).addElement("memReg:" + SPropertyOperations.getString(regionNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f0631L, "target")) + ":" + SPropertyOperations.getString(regionNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062cL, "memStart")) + ":" + SPropertyOperations.getString(regionNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310f9f062eL, "virtStart")) + ":" + SPropertyOperations.getString(regionNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0xf38a1310f9f0629L, 0xf38a1310facc22dL, "size")));
    }
    for (SNode irqNode : SLinkOperations.getChildren(ref, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x1f694dc7def4922L, "irqchips"))) {
      String pinbitmap = "";
      for (SNode s : SLinkOperations.getChildren(SLinkOperations.getTarget(irqNode, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7e53121dL, "pinBitmap")), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5311ffL, 0x1f694dc7e5e21b0L, "inputs"))) {
        pinbitmap += SPropertyOperations.getString(s, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7e5e2199L, 0x1f694dc7e5e219aL, "value")) + ",";
      }

      LinkedListSequence.fromLinkedListNew(allowStringList).addElement("addr:" + SPropertyOperations.getString(irqNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7df282e0L, "target")) + ":" + SPropertyOperations.getString(irqNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48dfL, "address")) + ":" + SPropertyOperations.getString(irqNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x1f694dc7def48deL, 0x1f694dc7def48e1L, "pin_base")) + ":" + pinbitmap.substring(0, pinbitmap.length() - 1));
    }
    Platform__BehaviorDescriptor.saveIntermediaryLanguageToFile_id3rFqjaCkqqw.invoke(ctx.getPrimaryInput(), allowStringList);
    for (String configLine : Platform__BehaviorDescriptor.configurePV_id2XWNstok1Pg.invoke(ctx.getPrimaryInput(), allowStringList)) {
      tgs.append(configLine);
      tgs.newLine();
    }
  }
}
