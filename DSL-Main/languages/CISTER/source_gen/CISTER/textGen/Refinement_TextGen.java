package CISTER.textGen;

/*Generated by MPS */

import jetbrains.mps.text.rt.TextGenDescriptorBase;
import jetbrains.mps.text.rt.TextGenContext;
import jetbrains.mps.text.impl.TextGenSupport;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SPropertyOperations;
import jetbrains.mps.smodel.adapter.structure.MetaAdapterFactory;
import org.jetbrains.mps.openapi.model.SNode;
import jetbrains.mps.internal.collections.runtime.ListSequence;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SNodeOperations;
import jetbrains.mps.internal.collections.runtime.IWhereFilter;
import jetbrains.mps.lang.smodel.generator.smodelAdapter.SLinkOperations;
import java.util.Deque;
import jetbrains.mps.internal.collections.runtime.LinkedListSequence;
import java.util.LinkedList;
import CISTER.behavior.Refinement__BehaviorDescriptor;

public class Refinement_TextGen extends TextGenDescriptorBase {
  @Override
  public void generateText(final TextGenContext ctx) {
    final TextGenSupport tgs = new TextGenSupport(ctx);
    if (SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x2f7ccdc757fdad33L, "target")).equals("JetsonTX2")) {
      tgs.append("#### START_REFINEMENT_JETSONTX2 ####");
      tgs.newLine();
      SNode extendsRef = ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(ctx.getPrimaryInput()))).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, "CISTER.structure.Extends"));
        }
      });
      SNode ex = ((SNode) extendsRef);
      if (SLinkOperations.getTarget(ex, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")) instanceof SNode) {
        tgs.appendNode(SLinkOperations.getTarget(ex, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")));
      }
      tgs.newLine();
      Deque<String> configs = LinkedListSequence.fromLinkedListNew(new LinkedList<String>());
      for (SNode allowNode : SLinkOperations.getChildren(ctx.getPrimaryInput(), MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x2f7ccdc7580dd5eeL, "allowList"))) {
        LinkedListSequence.fromLinkedListNew(configs).addElement(SPropertyOperations.getString(allowNode, MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2256bL, 0x2f7ccdc757ffc7afL, "target")));
      }

      for (String configLine : Refinement__BehaviorDescriptor.configure_id2XWNsto2pEs.invoke(ctx.getPrimaryInput(), configs, ((boolean) false))) {
        tgs.append(configLine);
        tgs.newLine();
      }

      tgs.append("#### END_REFINEMENT_JETSON_TX2 ####");
      tgs.newLine();
    }
    if (SPropertyOperations.getString(ctx.getPrimaryInput(), MetaAdapterFactory.getProperty(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef2209bL, 0x2f7ccdc757fdad33L, "target")).equals("ROS.Topics")) {
      tgs.append("#### START_REFINEMENT_ROS ####");
      tgs.newLine();
      SNode extendsRef = ListSequence.fromList(SNodeOperations.getChildren(SNodeOperations.getParent(ctx.getPrimaryInput()))).findFirst(new IWhereFilter<SNode>() {
        public boolean accept(SNode it) {
          return SNodeOperations.isInstanceOf(it, MetaAdapterFactory.getConcept(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, "CISTER.structure.Extends"));
        }
      });
      SNode ex = ((SNode) extendsRef);
      if (SLinkOperations.getTarget(ex, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")) instanceof SNode) {
        tgs.appendNode(SLinkOperations.getTarget(ex, MetaAdapterFactory.getContainmentLink(0x7f38d80738ca44f1L, 0x941e7c2f776e2e59L, 0x4b6096e70ef22575L, 0x2f7ccdc75800fc99L, "Target")));
      }
      tgs.newLine();
      tgs.append("#### END_REFINEMENT_ROS ####");
      tgs.newLine();
    }

  }
}
